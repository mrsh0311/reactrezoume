{"version":3,"sources":["adapter/Api.js","adapter/ServerAction.js","Services/TaskService.js","store/reducer/taskReducer.js","pages/utils/Alert.js","store/context/TaskContext.js","store/context/TaskStatusContext.js","pages/task/TaskHeader.js","pages/task/TaskListViewByStatus.js","pages/task/TaskListView.js","pages/components/form/SelectInput.js","pages/components/form/NumberInput.js","pages/components/form/TextInput.js","pages/task/TaskForm.js","pages/components/Modal.js","pages/task/TaskManagement.js","pages/task/TaskPages.js","App.js","reportWebVitals.js","index.js"],"names":["baseURL","ServerHandlerError","err","message","response","status","Error","Get","action","a","axios","get","url","catch","data","Post","key","formData","FormData","append","post","headers","Put","put","Remove","ids","delete","Object","values","join","getTaskListAction","type","registerTaskAction","removeTaskAction","TaskService","Search","Register","model","Edit","id","taskReducer","state","task","listModel","payload","index","findIndex","p","taskName","duration","statusId","temp","splice","showModal","selectedStatusModel","error","errorMessage","successMessage","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","icon","TaskContext","createContext","initialState","TaskProvider","children","useReducer","dispatch","service","useEffect","getTaskList","list","ManageError","registerTask","newTask","removeTask","Provider","value","openTaskFormForEdit","showTaskForm","hideTaskForm","openTaskFormForRegister","getTaskCountbyStatusId","filter","length","setSelectedTaskStatusModel","searchTaskCountbyStatusId","isExistsTask","trim","msg","setTimeout","statusTaskList","statusName","color","TaskStatusContext","TaskStatusProvider","props","TaskHeader","useContext","className","onClick","map","style","marginLeft","TaskListViewByStatus","backgroundColor","TaskListView","findTaskStatus","s","find","SelectInput","description","text","validation","useState","setValue","htmlFor","onChange","e","target","Number","val","NumberInput","TextInput","TaskForm","useForm","mode","register","handleSubmit","errors","formState","reset","taskNameValidation","required","validate","durationValidation","min","max","onSubmit","Modal","display","show","hide","header","footer","TaskManagment","marginRight","TaskPage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7485732c.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseURL = \"https://react.devsharp.ir/\";\r\n\r\nclass ServerHandlerError extends Error {\r\n\r\n    constructor(err) {\r\n\r\n        super(err.message);\r\n\r\n        switch (err.response.status) {\r\n            case 404:\r\n                this.message = \"not found\"\r\n                break;\r\n            case 400:\r\n                this.message = \"The submitted information is incomplete\"\r\n                break;\r\n            case 403:\r\n                this.message = \"You do not have the required access\"\r\n                break;\r\n            case 409:\r\n                this.message = \"Duplicated Error\"\r\n                break;\r\n            case 500:\r\n                this.message = \"Error In Server\"\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const Get = async (action) => {\r\n    let response = await axios.get(baseURL + action.url).catch(err => {\r\n       \r\n        throw new ServerHandlerError(err);\r\n    });\r\n\r\n    if (response)\r\n        return response.data\r\n\r\n    return null;\r\n}\r\n\r\nexport const Post = async (action, data) => {\r\n\r\n    let formData = new FormData();\r\n\r\n    for (let key in data) {\r\n        formData.append(key, data[key]);\r\n    }\r\n\r\n\r\n    let response = await axios.post(baseURL + action.url, formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" }\r\n    }).catch(err => {\r\n        throw new ServerHandlerError(err);\r\n    });\r\n\r\n    if (response)\r\n        return response.data\r\n\r\n    return null;\r\n}\r\n\r\nexport const Put = async (action, data) => {\r\n\r\n    let formData = new FormData();\r\n\r\n    for (let key in data) {\r\n        formData.append(key, data[key]);\r\n    }\r\n\r\n\r\n    let response = await axios.put(baseURL + action.url, formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" }\r\n    }).catch(err=>{\r\n        throw new ServerHandlerError(err);\r\n    });\r\n\r\n    if (response)\r\n        return response.data\r\n\r\n    return null;\r\n}\r\n\r\nexport const Remove = async (action, ids) => {\r\n\r\n    return await axios.delete(baseURL + action.url + \"/\" + Object.values(ids).join(\"/\")).catch(err=>{\r\n        throw new ServerHandlerError(err);\r\n    });\r\n}\r\n","\r\nexport const getTaskStatusListAction={url:\"StatusTask\",type:\"get\"};\r\n\r\nexport const getTaskListAction={url:\"Task\",type:\"get\"};\r\nexport const registerTaskAction={url:\"Task\",type:\"post\"};\r\nexport const editTaskAction={url:\"Task\",type:\"put\"};\r\nexport const removeTaskAction={url:\"Task\",type:\"delete\"};\r\n\r\n\r\n\r\n","import { Get, Post, Put ,Remove} from \"../adapter/Api\"\r\nimport { getTaskListAction, registerTaskAction, removeTaskAction } from \"../adapter/ServerAction\"\r\n\r\nexport default class TaskService\r\n{\r\n\r\n    Search=()=>{\r\n   \r\n       return Get(getTaskListAction);\r\n    }\r\n\r\n    Register=(model)=>\r\n    {\r\n       return Post(registerTaskAction,model);\r\n    }\r\n\r\n    Edit=(model)=>\r\n    {\r\n        return Put(registerTaskAction,model);\r\n    }\r\n\r\n    Remove=(id)=>\r\n    {\r\n       return Remove(removeTaskAction,{id:id});\r\n    }\r\n}","const taskReducer = (state, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"register\":\r\n            {\r\n                let task = state.model;\r\n                let listModel = state.listModel;\r\n\r\n                if (task.id === 0) {\r\n                    // //Register ...\r\n                    // let id = 1;\r\n                    // if (listModel.length > 0) {\r\n                    //     id = listModel[listModel.length - 1].id + 1\r\n                    // }\r\n                    task.id = action.payload;\r\n                    listModel = [...listModel, task];\r\n                }\r\n                else {\r\n\r\n                    // Edit ...\r\n                    let index = listModel.findIndex(p => p.id === task.id);\r\n                    if (index !== -1) {\r\n                        listModel[index] = task;\r\n                    }\r\n                }\r\n\r\n                return { ...state, listModel: listModel, model: { id: 0, taskName: '', duration: 0, statusId: 1 } }\r\n            }\r\n        case \"remove\":\r\n            {\r\n                let listModel = state.listModel;\r\n                let index = listModel.findIndex(p => p.id === action.payload);\r\n                if (index !== -1) {\r\n                    let temp = [...listModel];\r\n                    temp.splice(index, 1);\r\n                    listModel = [...temp];\r\n\r\n                }\r\n                return { ...state, listModel: listModel, model: { id: 0, taskName: '', duration: 0, statusId: 1 } };\r\n            }\r\n        case \"hideModal\":\r\n            {\r\n                return { ...state, showModal: false };\r\n            }\r\n        case \"setListModel\":\r\n            {\r\n                return { ...state, listModel: action.payload };\r\n            }\r\n        case \"showModal\":\r\n            {\r\n                return { ...state, showModal: true };\r\n            }\r\n        case \"selectModel\":\r\n            {\r\n                return { ...state, model: action.payload }\r\n            }\r\n        case \"resetModel\":\r\n            {\r\n                return { ...state, model: { id: 0, taskName: '', duration: 0, statusId: 1 } }\r\n            }\r\n        case \"selectStatus\":\r\n            {\r\n                return { ...state, selectedStatusModel: action.payload }\r\n            }\r\n        case \"showError\":\r\n            {\r\n                return { ...state, error: true, errorMessage: action.payload }\r\n            }\r\n        case \"hideError\":\r\n            {\r\n                return { ...state, error: false, errorMessage: '' }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default taskReducer;","import { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport const successMessage=()=>{\r\n    toast.info(\"the opration done...\",\r\n            {\r\n                position: \"top-left\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme:\"light\",\r\n                icon:\"🦄\"\r\n            }\r\n\r\n        );\r\n}\r\n\r\nexport const errorMessage=(msg)=>{\r\n    toast.error(msg,\r\n            {\r\n                position: \"top-left\",\r\n                autoClose: 6000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme:\"light\",\r\n                icon:\"🦄\"\r\n            }\r\n\r\n        );\r\n}","\r\nimport { createContext, useEffect, useReducer } from \"react\";\r\nimport TaskService from \"../../Services/TaskService\";\r\nimport taskReducer from \"../../store/reducer/taskReducer\";\r\nimport { errorMessage, successMessage } from \"../../pages/utils/Alert\";\r\n\r\n\r\nexport const TaskContext = createContext(null);\r\nconst initialState = {\r\n    listModel: [], showModal: false\r\n    , model: { id: 0, taskName: '', duration: 0, statusId: 1 },\r\n    selectedStatusModel: null, error: false, errorMessage: ''\r\n};\r\n\r\nconst TaskProvider = ({ children }) => {\r\n\r\n    const [state, dispatch] = useReducer(taskReducer, initialState);\r\n\r\n    const { listModel, showModal, model, selectedStatusModel, error, errorMessage } = state;\r\n\r\n\r\n    const service = new TaskService();\r\n\r\n    useEffect(() => {\r\n        getTaskList();\r\n    }, []);\r\n\r\n    const getTaskList = async () => {\r\n\r\n        try {\r\n            let list = await service.Search();\r\n            dispatch({ type: \"setListModel\", payload: list });\r\n        }\r\n        catch (err) {\r\n            ManageError(dispatch, err);\r\n        }\r\n    }\r\n    const registerTask = async () => {\r\n\r\n        try {\r\n            if (model.id === 0) {\r\n\r\n                let newTask = await service.Register(model);\r\n                dispatch({ type: \"register\", payload: newTask.id });\r\n                dispatch({ type: \"hideModal\" });\r\n                successMessage();\r\n\r\n            }\r\n            else {\r\n                await service.Edit(model);\r\n\r\n                dispatch({ type: \"register\" });\r\n                dispatch({ type: \"hideModal\" });\r\n                successMessage();\r\n            }\r\n        }\r\n        catch (err) {\r\n            ManageError(dispatch, err);\r\n        }\r\n    }\r\n\r\n    const openTaskFormForEdit = (task) => {\r\n        dispatch({ type: \"showModal\" });\r\n        dispatch({ type: \"selectModel\", payload: task });\r\n    }\r\n\r\n    const removeTask = async (id) => {\r\n        try {\r\n            await service.Remove(id);\r\n            dispatch({ type: \"remove\", payload: id });\r\n        }\r\n        catch (err) {\r\n            ManageError(dispatch, err);\r\n        }\r\n    }\r\n\r\n    const showTaskForm = () => dispatch({ type: \"showModal\" });\r\n\r\n\r\n    const hideTaskForm = () => dispatch({ type: \"hideModal\" })\r\n\r\n    const openTaskFormForRegister = () => {\r\n        dispatch({ type: \"showModal\" });\r\n        dispatch({ type: \"resetModel\" });\r\n\r\n    }\r\n\r\n    const getTaskCountbyStatusId = (statusId) => {\r\n\r\n        let list = listModel.filter(p => p.statusId === statusId);\r\n        return list.length;\r\n    }\r\n\r\n    const searchTaskCountbyStatusId = (statusId) => {\r\n        let list = listModel.filter(p => p.statusId === statusId);\r\n        return list;\r\n    }\r\n\r\n    const setSelectedTaskStatusModel = (status) => {\r\n        dispatch({ type: \"selectStatus\", payload: status });\r\n    }\r\n\r\n    const isExistsTask = (taskName) => {\r\n        let list = listModel.filter(p => p.taskName === taskName.trim()\r\n            && p.id !== model.id\r\n        );\r\n\r\n        return list.length > 0;\r\n    }\r\n\r\n    return (\r\n        <TaskContext.Provider value={{\r\n            listModel, showModal, model, selectedStatusModel, error, errorMessage\r\n            , registerTask, openTaskFormForEdit, removeTask, showTaskForm\r\n            , hideTaskForm, openTaskFormForRegister, getTaskCountbyStatusId\r\n            , setSelectedTaskStatusModel, searchTaskCountbyStatusId, isExistsTask\r\n        }}>\r\n\r\n            {children}\r\n        </TaskContext.Provider>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default TaskProvider;\r\n\r\nfunction ManageError(dispatch, err) {\r\n    dispatch({ type: \"showError\", payload: err.message });\r\n    errorMessage(err.message);\r\n    setTimeout(() => {\r\n        dispatch({ type: \"hideError\" });\r\n    }, 5000);\r\n}\r\n","import { createContext } from \"react\"\r\n\r\nconst statusTaskList = [\r\n    { id: 1, statusName: \"To Do\",color:\"#5cb85c\" },\r\n    { id: 2, statusName: \"In Progress\",color:\"#2196F3\"  },\r\n    { id: 3, statusName: \"Done\",color:\"#f44336\"  },\r\n    { id: 4, statusName: \"Archive\",color:\"#da190b\"  }\r\n]\r\n\r\nexport const TaskStatusContext=createContext(statusTaskList)\r\n\r\nconst TaskStatusProvider=(props)=>{\r\n    return(\r\n        <TaskStatusContext.Provider value={{statusTaskList}}>\r\n            {props.children}\r\n        </TaskStatusContext.Provider>\r\n    )\r\n}\r\n\r\nexport default TaskStatusProvider","import { useContext } from 'react';\r\nimport { TaskContext } from '../../store/context/TaskContext';\r\nimport {TaskStatusContext} from '../../store/context/TaskStatusContext'\r\n\r\nconst TaskHeader = () => {\r\n\r\n\r\n    const { statusTaskList } = useContext(TaskStatusContext);\r\n    const { getTaskCountbyStatusId,setSelectedTaskStatusModel } = useContext(TaskContext);\r\n\r\n    return (<header>\r\n        <button className=\"tablink\" onClick={()=>setSelectedTaskStatusModel(null)}>Task Managment</button>\r\n\r\n        {\r\n            statusTaskList.map((value) => {\r\n                return <button onClick={()=>setSelectedTaskStatusModel(value)}   key={value.id} className=\"tablink\" >{value.statusName} <span> List\r\n                </span>\r\n                    <span style={{marginLeft:7}}>\r\n                        {getTaskCountbyStatusId(value.id)}\r\n                    </span>\r\n                </button>\r\n            })\r\n        }\r\n    </header>);\r\n}\r\n\r\n\r\nexport default TaskHeader;","import { useContext } from \"react/cjs/react.development\";\r\nimport { TaskContext } from \"../../store/context/TaskContext\";\r\n\r\n\r\nconst TaskListViewByStatus = () => {\r\n\r\n\r\n    const { selectedStatusModel, searchTaskCountbyStatusId } = useContext(TaskContext);\r\n\r\n    return (<div>\r\n        <h2>Task List With Status {selectedStatusModel?.statusName}</h2>\r\n        <hr />\r\n        {\r\n            searchTaskCountbyStatusId(selectedStatusModel.id)?.map((value) => {\r\n\r\n                return (\r\n                    <div key={value.id} className=\"filterDiv\" style={{ backgroundColor: selectedStatusModel.color }}>\r\n                        <p>{value.taskName}</p>\r\n                        <div className=\"overlay\">\r\n                            <p>{value.taskName}</p>\r\n                            <p>Duration:{value.duration}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n\r\n            })\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default TaskListViewByStatus;","import { useContext } from 'react';\r\nimport { TaskStatusContext } from '../../store/context/TaskStatusContext'\r\n\r\nimport { TaskContext } from '../../store/context/TaskContext';\r\n\r\n\r\nconst TaskListView = (props) => {\r\n\r\n\r\n\r\n    const { listModel,openTaskFormForEdit,removeTask } = useContext(TaskContext);\r\n\r\n    const { statusTaskList } = useContext(TaskStatusContext);\r\n\r\n\r\n    const findTaskStatus = (id) => {\r\n\r\n        let s = statusTaskList.find((p) => p.id === id);\r\n        if (s)\r\n            return s.statusName\r\n        else\r\n            return \"\";\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr className=\"header\">\r\n                    <th>Task Name</th>\r\n                    <th>Duration</th>\r\n                    <th>Task State</th>\r\n                    <th>...</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    listModel.map((value) => {\r\n\r\n                        return (<tr key={value.id}>\r\n                            <td>{value.taskName}</td>\r\n                            <td>{value.duration}</td>\r\n                            <td>{findTaskStatus(value.statusId)}</td>\r\n\r\n                            <td>\r\n                                <i className=\"fa fa-edit text-success\"\r\n                                    onClick={() => {\r\n                                        openTaskFormForEdit(value);\r\n                                    }}\r\n                                ></i>\r\n                                <i className=\"fa fa-times\"\r\n                                    onClick={() => {\r\n                                        removeTask(value.id)\r\n                                    }}\r\n                                ></i>\r\n                            </td>\r\n\r\n                        </tr>)\r\n                    })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default TaskListView;","import { useEffect, useState } from 'react'\r\n\r\nconst SelectInput = ({model,id,description,list,text,validation}) => {\r\n\r\n    const [value,setValue]=useState(model[id])\r\n\r\n    useEffect(()=>{\r\n        setValue(model[id]);\r\n    },[model,id]);\r\n\r\n    const handleChange = (e) => {\r\n        setValue(e.target.value);\r\n        model[id]=Number(e.target.value);\r\n    }\r\n\r\n    return (<>\r\n        <label htmlFor={id}><b>{description}:</b></label>\r\n        <select {...validation} value={value} id={id} onChange={handleChange}>\r\n                {\r\n                    list.map((val) => {\r\n                        return <option key={val.id} value={val.id}>{val[text]}</option>\r\n                    })\r\n                }\r\n            </select>\r\n    </>)\r\n}\r\n\r\nexport default SelectInput;","import { useEffect, useState } from 'react'\r\n\r\n\r\nconst NumberInput = ({model,id,description,validation}) => {\r\n\r\n    const [value,setValue]=useState(model[id])\r\n\r\n    useEffect(()=>{\r\n        setValue(model[id]);\r\n    },[model,id]);\r\n\r\n    const handleChange = (e) => {\r\n        setValue(e.target.value);\r\n        model[id]=Number(e.target.value);\r\n    }\r\n\r\n    return (<>\r\n        <label htmlFor={id}><b>{description}:</b></label>\r\n        <input {...validation} id={id} value={value} type=\"text\" onChange={handleChange} />\r\n    </>)\r\n}\r\n\r\nexport default NumberInput;","import { useEffect, useState } from 'react'\r\n\r\nconst TextInput = ({model,id,description,validation}) => {\r\n\r\n    const [value,setValue]=useState(model[id])\r\n\r\n    useEffect(()=>{\r\n        setValue(model[id]);\r\n    },[model,id]);\r\n\r\n    const handleChange = (e) => {\r\n        setValue(e.target.value);\r\n        model[id]=e.target.value;\r\n    }\r\n\r\n    return (<>\r\n        <label htmlFor={id}><b>{description}:</b></label>\r\n        <input  {...validation} id={id} value={value} type=\"text\" onChange={handleChange} />\r\n    </>)\r\n}\r\n\r\nexport default TextInput;","\r\nimport { useContext, useEffect } from 'react';\r\nimport { TaskStatusContext } from '../../store/context/TaskStatusContext'\r\n\r\nimport { SelectInput, TextInput, NumberInput } from '../components/form/Index'\r\nimport { TaskContext } from '../../store/context/TaskContext'\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst TaskForm = () => {\r\n\r\n\r\n\r\n    const { statusTaskList } = useContext(TaskStatusContext);\r\n\r\n    const { model, registerTask,isExistsTask } = useContext(TaskContext);\r\n    const { register, handleSubmit, formState: { errors },reset } = useForm({ mode: \"all\" });\r\n\r\n\r\n    useEffect(()=>{\r\n        reset();\r\n    },[model,reset])\r\n\r\n    const taskNameValidation = {\r\n        ...register(\"taskName\", {\r\n            required: { value: true, message: \"Task Name is required\" }\r\n            ,validate:(val)=>{\r\n                if(isExistsTask(val))\r\n                {\r\n                    return \"task is duplicated\"\r\n                }\r\n                return true;\r\n            }\r\n        })\r\n    }\r\n\r\n    const durationValidation = {\r\n        ...register(\"duration\", {\r\n            min: { value: 3, message: \"Task duration must be more than 3\" },\r\n            max: { value: 20, message: \"Task duration must be less than 20\" }\r\n        })\r\n    }\r\n\r\n    return (<form onSubmit={handleSubmit(registerTask)}>\r\n        <div className=\"container\">\r\n            <div className={errors.taskName ? \"input-group error\" : \"input-group\"}>\r\n                <TextInput validation={taskNameValidation}\r\n                    model={model} id=\"taskName\" description=\"Task Name\" />\r\n                {errors.taskName && <label className=\"error-message\">{errors.taskName?.message}</label>}\r\n            </div>\r\n\r\n            <div className={errors.duration ? \"input-group error\" : \"input-group\"}>\r\n                <NumberInput validation={durationValidation} model={model} id=\"duration\" description=\"Task Duration\" />\r\n                {errors.duration && <label className=\"error-message\">{errors.duration?.message}</label>}\r\n            </div>\r\n\r\n            <div className={errors.statusId ? \"input-group error\" : \"input-group\"}>\r\n                <SelectInput\r\n                    model={model} id=\"statusId\" description=\"Task Status\"\r\n                    list={statusTaskList} text=\"statusName\" />\r\n                {errors.statusId && <label className=\"error-message\">{errors.statusId?.message}</label>}\r\n            </div>\r\n\r\n            <button className=\"btn success\">Register</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default TaskForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nconst Modal = (props) => {\r\n\r\n\r\n    return (<div className=\"modal\" style={{ display: props.show ? \"block\" : \"none\" }}>\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <span className=\"close\" onClick={() => {\r\n                    if (props.hide) {\r\n                        props.hide();\r\n                    }\r\n                }}>&times;</span>\r\n                <h2>{props.header}</h2>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                {props.children}\r\n            </div>\r\n\r\n            {\r\n                props.footer ? \r\n                <div className=\"modal-footer\">\r\n                    {props.footer}\r\n                </div>\r\n                :<></>\r\n           }\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default Modal;","\r\nimport TaskListView from './TaskListView'\r\nimport TaskForm from \"./TaskForm\";\r\nimport Modal from \"../components/Modal\";\r\n\r\nimport { useContext } from 'react';\r\nimport { TaskContext } from '../../store/context/TaskContext'\r\n\r\nconst TaskManagment = () => {\r\n\r\n    const {showModal,openTaskFormForRegister,hideTaskForm } = useContext(TaskContext);\r\n\r\n   \r\n    return (\r\n        <div>\r\n            <h2>Task Managment</h2>\r\n            <hr />\r\n            <button className=\"btn success\" onClick={() => {\r\n           openTaskFormForRegister()\r\n\r\n            }}><span className=\"fa fa-plus\" style={{ marginRight: 5 }}></span>New</button>\r\n\r\n            <TaskListView   />\r\n\r\n            <Modal\r\n                header={<p>Task Managment</p>}\r\n                show={showModal} hide={() => { hideTaskForm() }}>\r\n                <TaskForm /> \r\n            </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskManagment;\r\n\r\n","\r\nimport { useContext } from \"react\";\r\nimport { TaskContext } from \"../../store/context/TaskContext\";\r\nimport TaskHeader from \"./TaskHeader\";\r\nimport TaskListViewByStatus from \"./TaskListViewByStatus\";\r\nimport TaskManagment from \"./TaskManagement\"\r\nconst TaskPage = () => {\r\n    const { selectedStatusModel } = useContext(TaskContext);\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <TaskHeader />\r\n            {\r\n                selectedStatusModel? <TaskListViewByStatus/>:<TaskManagment />\r\n            }\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TaskPage;","import React from 'react';\nimport './App.css'\n\nimport TaskPage from './pages/task/TaskPages';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport TaskStatusProvider from './store/context/TaskStatusContext'\nimport TaskProvider from './store/context/TaskContext';\n\nconst App = () => {\n\n  return (\n    <div>\n      <ToastContainer />\n      <TaskProvider>\n        <TaskStatusProvider>\n          <TaskPage />\n        </TaskStatusProvider>\n      </TaskProvider>\n    </div>\n  )\n}\n\n\n\n\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}